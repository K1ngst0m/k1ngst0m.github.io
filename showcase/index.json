[{"content":"核心 微平面理论(Microfacet Theory)  将物体表面建模成无数微观尺度上有随机朝向的理想镜面反射的小平面(microfacet) 实际PBR工作流中, 微平面通过粗糙度贴图或高光贴图来表示 微观尺度上, 表面越粗糙反射越模糊, 越光滑反射越集中 到达微观尺度后任何平面都可以用称为微平面的细小镜面来进行描绘 用统计学的方法估算微平面粗糙程度  半程向量(Halfway Vector): 位于光线向量l和视线向量v之间的中间向量 用基于一个平面的粗糙度(Roughness)来计算出半程向量的方向与微平面平均取向方向一致的概率    能量守恒(Energy Conservation)   入射光线能量 \u0026gt;= 出射光线能量\n  随着粗糙度上升, 镜面反射区域面积增加, 平均亮度下降\n  出射光线能量不能超过入射光线能量 (发光面除外)\n  镜面反射光照 (反射部分): 光线不进入平面直接反射的光线\n  漫反射光照 (折射部分): 光线进入表面被吸收的光线\n 光线与粒子碰撞后吸收光线所携带的一部分或是全部能量, 转为热量 并非所有能量会被全部吸收, 光线会继续沿着随机方向发散, 再和其他粒子碰撞直至能量完全耗尽或者再次离开这个表面 光线脱离物体表面后将会协同构成该表面的(漫反射)颜色 PBR对漫反射进行简化, 假设平面上每一点所有折射光都会被完全吸收而不会散开 保留次表面散射(Subsurface Scattering)的着色器能更好地显示皮肤, 大理石, 蜡质等类视觉效果    金属 (Metallic) 表面的反射与非金属(介电质Dielectrics)不同:\n 金属反射原理与折射原理相同 金属不会显示漫反射颜色 (所有折射光会被直接吸收而不会散开, 只留下反射光)    反射光与折射光互斥, 光线被反射无法被吸收, 折射光余下的进入表面中的能量正好是计算完反射后余下的能量\n  菲涅尔反射(Freshnel Reflection)  表示观察看到的反射光线的向量与视角相关的现象 光线以不同角度入射会有不同反射率, 掠射角度(90)下反射率最大 F0: 平行于表面法向量入射的菲涅尔反射值, 任意角度的菲涅尔反射可由F0和入射角度计算得出 光线对于不同物质有不同的反射率, 非金属F0: 0.02~0.04, 金属F0: 0.7~1.0  线性空间光照(Linear Space Lighting)  线性(向量)空间: 数字化的颜色和光照强度进行相加相乘计算的结果依然能与真实的结果一致 伽马矫正(gamma correction):  对图像进行非线性处理 具体实现是对图中每个像素做一次幂函数运算 图片文件夹存储的都是伽马纠正过的颜色值   PBR将贴图和颜色去除伽马纠正从伽马空间转换到线性空间, 再传递给着色器进行光照计算 线性空间下渲染管线流程: 去除伽马纠正-\u0026gt;着色-\u0026gt;伽马纠正-\u0026gt;显示 颜色值的计算和操作必须在线性空间中执行 描述物体表面属性的贴图(如粗糙度, 高光贴图, 金属贴图)必须保证是线性空间  色调映射/复制(Tone Mapping/reproduction)  表示以感知上令人信服的方式将HDR场景的强度值转换为显示强度的过程(将宽范围光照级别拟合到屏幕的有限色域的过程) 基于HDR渲染出来的亮度值会超过显示器能显示的亮度, 需要使用色调映射转为LDR(显示器能正常显示)  物质的光学特性(Real-World Measurement Based Substance Properties)  物质分为三大类: 绝缘体(Insulatiors), 半导体(semi-conductors), 导体(conductors) 渲染和游戏通常只关注导体和绝缘体 菲涅尔反射率代表材质的反射颜色和强度, 是真实世界的核心测量数值 非金属反射颜色: 单色/灰色镜面反射颜色(单个float) 金属反射颜色: 彩色镜面反射(RGB)  光照与材质解耦(Decoupling of Lighting and Material)  保证场景中所有对象有视觉一致性, 相同光照可以应用于所有物体和材质, 无需传统光照模型的额外调整, 提升美术工作效率  光学 (Optics) 几何光学/射线光学 (Geometrical Optics) 光与介质边界交互原理 一束光射到物体表面时, 由于物体表面与空气两种介质之间折射率的快速变化, 光线会发生反射和折射:\n  反射(Reflection):\n 光线在两种介质交界处的直接反射, 即镜面反射 镜面反射占入射光线的比率由菲涅尔方程计算    折射(Refraction): 从表面折射入介质的光, 会发生吸收(absorption)和散射(scattering), 介质的整体外观由散射和吸收特性决定\n  散射(Scattering): 由观察尺度划分\n 漫反射(Diffuse): 观察像素大于散射距离 次表面散射(Subsurface Scattering): 观察像素小于散射距离 透射(Transmission): 入射光经过折射穿过物体后的出射现象, 为次表面散射的特例    吸收(Absorption): 具有复折射率(complex number)的物质区域会引起吸收\n  光与不同物质交互 根据材质光学特性分为金属和非金属:\n   类型 反射 折射(散射) 折射(吸收)     金属 为三通道颜色 几乎无散射 立刻被自由电子吸收   非金属(均匀介质) 单通道颜色 无散射 无折射率变化   非金属(非均匀 - 浑浊介质) 单通道颜色 弱散射, 方向略微随机化 \u0026mdash;   非金属(非均匀 - 半透明介质) 单通道颜色 强散射, 方向完全随机化 \u0026mdash;   非金属(非均匀 - 不透明介质) 单通道颜色 强散射, 方向完全随机化 \u0026mdash;      金属(Metal)\n 外观主要取决于镜面反射, 折射的光线几乎全被自由电子吸收, 且不存在散射 反射颜色为三通道颜色    非金属(No-Metal): 即电介质(Dielectric), 整体外观主要由吸收和散射的特性组合决定\n 反射(Reflection): 单通道颜色(R=G=B) 折射(Refraction): 整体外观由散射和吸收的特性组合决定, 不同介质类型散射和吸收特性:  均匀介质(Homogeneous Media): 主要为透明介质, 无折射率变化, 不存在散射, 光直线传播不改变方向, 强度会通过吸收减少 非均匀介质(Nohomogeneous Media): 通常可以建模为具有嵌入散射粒子的均匀介质, 具有折射率变化  浑浊介质(Cloudy Media): 具有弱散射, 散射方向略微随机化, 根据组成不同具有复数折射率的区域引起吸收 半透明介质(Translucent Media): 具有强散射, 散射方向完全随机化, 根据组成不同具有复数折射率的区域引起吸收 不透明介质(Opaque Media): 与半透明介质一致        半导体(semiconductor) : 综合金属和非金属的特性\n  真实世界的材质渲染 辐射度量学 (Radiometry)  辐射度量学是用来度量电磁场辐射(包括可见光)的手段, 多种辐射度量(radiometric quantities)用来测量曲面或某个方向的光, 其中辐射率(Radiance)与反射率方程有关  常见辐射量单位    物理量 说明     辐射能(Radiant energy) 能量   辐射通量/功率(Radiant flux) 单位时间的辐射能量   辐射度(Radiosity) 表面出射和反射的辐射通量总和   辐射出射度(Radiant exitance) 表面出射的辐射通量   辐射强度(Radiant intensity) 单位立体角的辐射通量   辐射率(Radiance) 单位立体角的单位投射表面的辐射通量   辐照度(Irradiance) 入射表面的辐射通量    辐射率(Radiance)   辐射率用来量化单一方向发射来的光线大小或强度, 辐射度量学上表示一个区域平面上光线总量的物理量, 受到入射(Incident)光线与平面法线间夹角的余弦值影响\n  组成辐射率的物理变量:\n  辐射通量/功率(Radiant flux):\n 表示一个光源所输出的能量; 可以看作该光源包含各种波长的一个函数, 辐射通量计算该函数的总面积; 以瓦特为单位, 通常使用RGB来作为辐射通量的表示, 对于视觉上的影响可以忽略;    立体角(Solid Angle):\n 投射到单位球体上的一个截面的大小或者面积 将立体角和面积看作无穷小(面转为点, 立体角转为方向向量), 就可以用辐射率表示单束光线穿过空间中的一点    辐射强度(Radiant Intensity):\n 表示单位球面上, 一个光源向每单位立体角所投送的辐射通量 用于计算单位面积(立体角)能量大小      渲染方程 反射率方程   渲染方程(Render Equation):\n 描述了光能在场景中的流动, 目前用来模拟光视觉最好的模型 物理基础是能量守恒定律    反射率方程(The Reflectance Equation):\n 基于PBR的渲染方程的特化版本(近似)    双向反射分布函数BRDF BRDF介绍 (BRDF, Bidrectional Reflective Distribution Function)\n  基于表面材质属性对入射辐射率缩放或加权\n  输入: 光的入射, 出射方向, 平面法线, 微平面粗糙度\n  输出: (近似) 每束光线 对一个材质平面 最终反射的光线的权\n (能量守恒) 完全光滑情况, 所有入射光线BRDF 返回0.0, 只有一束与出射光线拥有相同的角度光线会得到1.0返回值    遵循能量守恒定律\n  采用入射和出射方向作为参数的Blinn-Phong也认为是一个BRDF, 由于不遵循能量守恒, 不是PBR\n  实时渲染管线通常使用 Cook-Torrance BRDF\n  BxDF:\n 对于BRDF(反射), BTDF(折射), BSDF(散射), BSSRDF(次表面散射)等几种双向分布函数的一个统一表示 BSDF = BRDF + BTDF BSSRDF: 相比与BRDF可以指定不同光线入射位置和出射位置 BSDF, BTDF, BSSRDF用于表示透明材质和次表面散射材质    漫反射BRDF(Diffuse BRDF)   传统型:\n Lambert    基于物理模型:\n Oren Nayar Simplified Oren-Nayar Disney Diffuse Renormalized Disney Diffuse Gotanda Diffuse PBR diffuse for GGX+Simth MultiScattering Diffuse    Disney Principled BRDF   着色模型是艺术导向(Art Directable), 不一定要完全物理正确(physically correct)\n  核心理念:\n 应使用直观的参数, 非物理类晦涩参数 参数尽可能少 参数合理范围在0-1 允许参数在有意义时超出正常的合理范围 所有参数组合应尽可能健壮和合理    BRDF参数:\n baseColor(基础色): 表面颜色, 通常由纹理提供 subsurface(次表面): 使用次表面近似控制漫反射形状 metallic(金属度): 金属(0=电介质, 1=金属), 两种不同模型间的线性混合, 金属模型无漫反射 specular(镜面反射强度): 入射镜面反射量, 用于取代折射率 specularTint(镜面反射颜色): 对美术控制的让步, 用于基础色(base color)的入射镜面反射进行颜色控制, 掠射镜面反射仍然非彩色 roughness(粗糙度): 表面粗糙度, 控制漫反射和镜面反射 anisotropic(各向异性强度): 各向异性强度, 用于控制镜面反射高光的纵横比(0同向异性, 1各向异性) sheen(光泽度): 额外的掠射分量(gazing component), 主要用于布料 sheenTint(光泽颜色): 对sheen的颜色控制 clearcoat(清漆强度): 有特殊用途的第二个镜面波瓣(specular lobe) clearcoarGloss(清漆光泽度): 控制透明图层光泽度, 0 = \u0026ldquo;缎面(satin)\u0026ldquo;外观, 1 = \u0026ldquo;光泽(gloss)\u0026ldquo;外观    镜面反射BRDF(Specular BRDF)  目前业界主流基于物理的Specular BRDF: Microfacet Cook-Torrance BRDF  Cook-Torrance BRDF 模型   由漫反射(Lambertian)和镜面反射(cook-torrance)组成\n  Lambertian: c / π\n π用于对漫反射光进行标准化 足够应付大多数实时渲染    cook-torrance: DFG / 4(ωo⋅n)(ωi⋅n)\n Specular D: 法线/镜面分布函数, 估算受到表面粗糙程度情况下, 取方向与半程向量一致的微平面数量, 用来估算微平面的主要函数 Specular F: 菲涅耳方程, 不同的表面角下表面所反射的光线所占的比率 Specular G: 几何函数, 描述了微平面自成阴影的属性, 当一个平面比较粗糙, 微平面可能挡住其他微平面减少反射的光线    UE4使用的函数:\n Specular D: Trowbridge-Reitz GGX Specular F: Fresnel-Shilick Approximation Specular G: Smith\u0026rsquo;s Schlick-GGX    法线分布函数( Normal Distribution Function )  统计学上近似表示半程向量h取向一致的微平面比率 输入: 材料的粗糙程度 Trowbridge-Reitz GGX in GLSL:  1 2 3 4 5 6 7 8 9 10 11 12  float D_GGX_TR(vec3 N, vec3 H, float a){ float a2 = a * a; float NdotH = max(dot(N, H), 0.0); float NdotH2 = NdotH * NdotH; float nom = a2; float denom = (NdotH2 * (a2 - 1.0) + 1.0); denom = PI * denom * denom; return nom / denom; }   几何函数 (Geometry Function)  从统计学上近似求得微平面间互相遮蔽的比率, 相互遮蔽会损耗光线的能量 输入: 材料的粗糙程度, 粗糙度较高的表面, 其平面间的相互遮蔽概率就越高 使用的几何函数: Schlick-GGX: (GGX, Schlick-Beckmann) 为了有效估算几何部分, 需要考虑:  观察方向(Geometry Obstruction) 光线方向向量(几何阴影(Geometry Shadowing))   使用史密斯法(Smith's method)包含观察方向和光线方向向量 Schlick-GGX in GLSL:  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  float GeometrySchlickGGX(float NdotV, float k){ float nom = NdotV; float denom = NdotV * (1.0 - k) + k; return nom / denom; } float GeometrySmith(vec3 N, vec3 V, vec3 L, float k){ float NdotV = max(dot(N, V), 0.0); float NdotL = max(dot(N, L), 0.0); float ggx1 = GeometrySchlickGGX(NdotV, k); float ggx2 = GeometrySchlickGGX(NdotL, k); return ggx1 * ggx2; }   菲涅尔方程 (Fresnel Requation)   描述被反射的光线对比光线被折射部分所占的比率, 这个比率会随着观察角度不同而不同\n  当光线碰撞到一个表面时, 菲捏尔方程会根据观察角度求得被反射光线的占比, 根据能量守恒原则, 可以直接得出光线被折射的部分以及剩余能量\n  折射指数(IOR, Indices of Refraction): 光在传播到两种不同介质交界处(穿过)时, 原始光波和新的光波的相速度(Phase Velocity)的比率\n  垂直观察物体时该表面只有基础反射率(Base Reflectivity), 利用折射指数计算得出\n  当视线法线夹角增大时反射性会增大, 90度理论上能完全反射光线\n  使用Freshnel-Schlick近似法求得近似解 ( 菲涅尔原始方程较复杂 )\n  仅对非金属表面(介电质)有效, 对于导体(Conductor)表面, 使用IOR计算F0不能得出正确的结论, 需要分别使用不同的菲涅尔方程, 很麻烦\n  统一金属和非金属公式: 通常预先计算出F0, 然后基于相应观察角的Freshnel-Schlick近似对这个值进行插值\n  F0规律: 非金属通常不会高于0.17, 导体材质大多在0.7-1.0\n  Freshel Schlick in GLSL:\n  1 2 3 4 5 6 7  // calc F0 // vec3 F0 = vec3(0.04); // F0 = mix(F0, surfaceColor.rgb, metalness);  vec3 freshnel Schlick(float cosTheta, vec3 F0){ return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0); }   ","description":"PBR 学习记录 -- 理论基础","id":6,"section":"posts","tags":["CG"],"title":"PBR笔记 - 理论基础","uri":"http://npchitman.github.io/posts/pbr-theory/"},{"content":"渲染管线主要功能是对给定虚拟相机, 三维物体, 光源, 照明模式, 纹理等条件情况下, 生成一副二维图像的过程\n图形渲染管线工作流程 应用阶段(Application)  开发者通过程序对图元数据进行配置和调控 由于可以对该阶段进行完全控制, 可以通过更改实现方法来改变性能 通常该阶段在几个并行处理器上执行, 称为超量体系(superscalar)结构 通常实现的方法有: 碰撞检测, 加速算法, 输入检测, 动画, 力反馈, 纹理动画, 变换仿真, 几何变形, 和一些不在其他阶段执行的算法 (如层次视锥裁剪等加速算法) 该阶段将摄像机位置, 光照和模型的图元数据输出到几何阶段  几何阶段(Geometry)   模型视点变换(Model to View Transform):\n 模型变换(model transform): 从model space到world space, 转到适合模型渲染的空间中 视图变换(view transform): 转换到观察空间(view space), 将相机放在原点, 进行视点校准(朝向z轴负方向, y轴指向上方, x轴指向右边)    顶点着色(Vertex Shadering): 主要确定模型顶点处材质的光照效果\n 对物体的外观进行建模, 得到每个对象的材质, 照射在对象光源效果的一些描述 着色(shading): 确定材质上的光照效果, 过程涉及在对象上各个点计算着色方程(shading equation) 可以在顶点处存储各种材料数据(颜色, 向量, 纹理坐标, 法线, 颜色坐标或计算着色方程所需的其他信息) 顶点着色的结果计算完成后作为光栅化阶段的输入进行处理    投影(Projection):\n 将视体变换到一个单位立方体内(规范立方体(Canonical View Volume, CVV, 对角顶点为(-1, -1, -1), (1, 1, 1)) 主要有两种投影方法: 正交投影(orthographic/parallel projection), 透视投影(perspective projection) 完成投影后, z坐标将不会保存于得到的图片中, 实现了从3d转为2d    裁剪(Clipping): 去除相对于屏幕外的物体\n 只有当图元处于CVV中才需要将其发送到光栅化阶段 图元相对于CVV分三种情况: 完全位于内部(不处理), 部分位于内部(裁剪处理), 完全位于外部(直接丢弃)    屏幕映射(Screen mapping): 将之前步骤得到的坐标映射到对应的屏幕坐标系\n 首先进行平移, 再缩放 映射过程中z坐标不受影响 新的x, y坐标称为屏幕坐标系, 与z坐标一起进入光栅化阶段    光栅化(Rasterization)   从二维顶点的屏幕空间(包含深度值, 及相关着色信息), 到屏幕上的像素转换\n  由几何阶段确定屏幕上的顶点, 颜色, 纹理坐标后, 给每个像素(Pixel)正确配色, 绘制整幅图像\n  光栅化步骤   三角形设定(Triangle Setup)\n 计算三角形表面差异和其他相关数据 该数据主要用于扫描转换(scan conversion), 和由几何阶段处理的各种着色数据插值操作所用 该过程在专门的硬件上执行    三角形遍历/扫描转换(Triangle Traversal/scan conversion)\n 进行逐像素检查操作, 即检查哪些采样点(像素)在三角形中 对于有三角形部分重合的像素, 在重合部分生成片段(fragment) 每个三角形片段属性(片段的深度, 着色数据)均由其三个顶点插值生成    像素着色(Pixel Shading)\n 进行逐像素着色, 如纹理贴图(Texturing)操作 使用插值的着色数据作为输入, 输出一种或多种颜色信息到下一阶段 在可编程GPU进行    融合(Merging)\n 融合的主要任务是合成当前存储于缓冲器中的片段颜色(上个阶段产生), 非完全可编程, 但高度可配置 帧缓冲(frame buffer): 通常包含一个系统所具有的所有缓冲器(或是颜色buffer和z-buffer的组合) 颜色缓冲器: 颜色(RGB)的矩阵列, 每个像素的信息都存在颜色缓冲器中 深度缓冲(z-buffer): 负责可见性的处理, 通常通过z-buffer来实现 alpha通道(alpha channel): 和颜色缓冲器计算每个像素的不透明值, 在深度测试前传入片段中运行, 通常用于不影响深度缓冲的全透明片段处理 模板缓冲(stencil buffer): 记录所呈现图元位置的离屏缓存, 每个像素通常占用8位, 用于进行一些特效制作 累计缓冲(accumulation buffer): 用一组操作符对图像进行累积, 用于产生动态模糊(motion blur), 景深(depth of field), 后处理反走样(post-process anti-aliasing), 软阴影(soft shadows)等;    双缓冲(double buffering):\n 用于避免观察者感知到图元处理发送到屏幕的过程 屏幕绘制在后置缓冲器(backbuffer)中离屏进行 后置缓冲器不断与用于屏幕显示的前置缓冲内容进行交换(不影响显示时)    GPU渲染管线工作流程 现代编程语言  现代着色阶段(SHader model 4.0, DirectX 10及以后)使用通用着色核心(common-shader core), 表明顶点, 片段, 几何着色器共享一套编程模型 目前着色语言都是C-like, 如GLSL, CG, HLSL 被编译成独立于机器语言的汇编语言IL, 通常在驱动中转化成实际机器语言, 可以兼容不同硬件实现 IL可以理解成定义一个着色语言编译器的虚拟机, 处理多种类型寄存器和数据源, 预编一系列指令处理器 很多图形操作使用短矢量(最高四位), 处理器拥有4路SIMD(single-instruction multiple-data, 单指令多数据)兼容性 每个寄存器包含四个独立的值, 32位单精度浮点的标量和矢量是其基本数据类型, 也支持结构体, 数组和矩阵  矢量:位置(xyzw), 法线, 矩阵行, 颜色(rgba), 纹理坐标(uvwq) 标量: 计数器, 索引, 位掩码    实现步骤概述  顶点着色前进行输入装配(Input Assembler)阶段, 将一些数据流组织在一起, 发送到管线  GPU实现了几何和光栅化概念管线阶段, 步骤如下:\n顶点着色器(Vertex Shader): 完全可编程  顶点属性包括位置, 颜色, 法线, 纹理坐标和位置 对每个顶点属性进行变换, 变形等操作, 提供修改/创建/忽略顶点相关属性的功能 不能创建和删除顶点, 一个顶点的结果不能传递到另一个顶点 每个顶点独立处理, GPU上着色器处理器可以并行应用到传入的顶点流上 可以在这里进行光照计算, 但一般在片段着色器中计算 顶点坐标必须完成顶点从模型空间转换到齐次裁剪空间(世界, 观察, 裁剪) 顶点着色器与通用核心虚拟机(Common-Shader Core Virtual Machine)非常相似, 传入的每个顶点由 流输出(Stream output): Shader Model4.0支持, 顶点着色器除了将处理后的数据发送到光栅化阶段, 还可以输出到流(有序数组), 输出到流的数据可以通过管线回传, 允许迭代处理, 是和模拟流动的水和其他特效  细面曲分 (Teselation Shader): 可选  利用镶嵌化处理技术对三角面进行细分, 以此来增加三角面的数量 借助曲面细分的技术实现LOD机制 组成:  外壳着色器(Hull Shader)(可编程) 镶嵌器(Tessellator): 由硬件管理 域着色器(Domain Shader)(可编程)    几何着色器(Geometry Shader): 可选, 完全可编程  Shader Model 3.0以上支持 主要对输入图元(单个对象及相关的顶点)进行操作 允许GPU高效创建和销毁几何图元:  几何增长: 改变新传递的图元的拓扑结构 接受任意拓扑类型的图元, 输出点, 折线(line strip), 三角形条(triangle strips)   常见应用: 元球的等值曲面细分(metaball isosurface tessellation), 线段细分的分形(fractal subdivision of line segments), 布料模拟等  功能阶段  裁剪(Clipping): 可配置  可选运行的裁剪方式, 添加自定义的裁剪面   屏幕映射(Screen Mapping): 完全固定 三角形设定(Triangle Setup): 完全固定 三角形遍历(Triangle Traversal): 完全固定  像素/片段着色器(Pixel/Fragment Shader): 可编程  主要进行像素/片元的处理, 在每个片段上执行着色方程 常用来处理场景光照及相关的效果, 如凹凸纹理映射和调色 进行光照和阴影等高级效果处理 着色器调用的像素并非和屏幕像素一一对应, 如计算被遮挡的物体 该着色器通常在最终合并阶段设置片段颜色进行合并, 深度值也可以在该着色器修改 SM4.0中共有16个4维向量可以从顶点着色器传到像素着色器, 使用几何着色器时增加到32个向量  合并阶段(Merging): 可配置  将像素着色器中生成的各个片段的深度和颜色与帧缓冲结合在一起 除了进行合并操作, 还可以进行相关缓存的处理(Z-buffer, Stencil等), 透明处理(Transparency), 混合(Blending), 合成(Compositing) 不可编程, 但是高度可配置, 可以设置颜色混合来执行大量不同操作:  Alpha值的乘法, 加法, 减法的组合 最大值, 最小值, 按位逻辑运算   根据片段的Alpha值进行混合, 用来产生半透明的效果 半透明的物体需要遵循画家算法进行绘制, 或使用顺序无关的半透明渲染技术(OIT)技术  ","description":"渲染管线流程","id":7,"section":"posts","tags":["cg"],"title":"渲染管线流程","uri":"http://npchitman.github.io/posts/render_pipline/"},{"content":"效果预览    Info Preview          介绍  对纯键盘操作进行优化 其他的发行版未测试, 理论上也适用 具体的系统环境参考图1(Info)  安装方法 执行部署脚本 注: 脚本将所有的配置部署到相应的目录下, 为了安全性, 若文件存在则不会覆盖,\n若要使用安装脚本, 请备份好自己的配置再将其从相应的目录删除\n1 2 3 4 5  git clone https://github.com/npchitman/dot_files cd dot_files sh put.sh   安装字体  Fantasque: 非常好看的编程用字体 Font-Awesome: 图标, 可在这里查找  使用方法 快捷键  全部快捷键在 i3config 配置里, 举出一些例子  快捷菜单    按键 说明     Super + d 快捷启动应用   Super + Shift + d 应用菜单   Super + Shift + w 快捷启动站点   Super + shift + e 电源选项    音频控制  需要 playerctl 支持,\nspotify 下完美使用, 其他自行测试     按键 说明     Super + Shift + n/m 播放上一首/下一首曲子   Super + Alt + p 暂停/继续播放   Super + Alt + k/j 音量增加/减少   Super + Alt + m 静音/取消静音    其他    按键 说明     Super + Alt + w 随机壁纸与相应配色, 需要 pywal 支持   Super + a 快速截图, 需要 scort 支持    配置文件包含的应用 - config    应用名 说明     compton 独立合成管理器, 为 i3 提供淡入淡出, 阴影等效果   dunst 通知窗口   i3 i3 桌面配置   polybar 系统状态栏, 若要使用请参考 wiki   ranger tui 文件浏览器, 支持图片预览等功能   rofi 包含程序启动器, 电源菜单, 网站快捷打开菜单   termite 模拟终端   tilda 下拉式模拟终端   vimiv 类 vim 操作的图片浏览工具    - emacs   基于 redguardtoo/emacs.d\n的配置, 请参考文档\n  custom.el: 请参考 overide default setup\n  - nvim  使用 thinkvim 的配置 thinkvim.d: 参考 User Custom  快捷键绑定  下面是个人自定义快捷键, 关于 thinkvim 默认的快捷键参考 leaderkey.vim 和 motion.vim \u0026lt;LocalLeader\u0026gt;为分号;     快捷键 说明     H/L 移动到改行句首/尾   Ctrl g 映射为Esc键   \u0026lt;LocalLeader\u0026gt; cc/cu 注释/取消注释   \u0026lt;LocalLeader\u0026gt;\u0026lt;LocalLeader\u0026gt; k/j 向上/下快速跳转光标   \u0026lt;LocalLeader\u0026gt; q 退出vim    - xorg X系统相关配置, 下面给出相关 wiki\n  Xresources\n  Xinitrc\n  Xprofile\n  - zsh zsh 相关配置, 参考 ohmyzsh\n zprofile zshrc  ","description":"arch linux, i3wm","id":8,"section":"posts","tags":["linux"],"title":"Linux Ricing 1.0","uri":"http://npchitman.github.io/posts/linux_ricing/"}]