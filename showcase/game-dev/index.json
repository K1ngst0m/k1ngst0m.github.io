[{"content":"PBR Physically Based Rendering 理论基础概括   微平面理论(Microfacet Theory)\n 将物体表面建模成无数微观尺度上有随机朝向的理想镜面反射的小平面(microfacet) 实际PBR工作流中, 微平面通过粗糙度贴图或高光贴图来表示    能量守恒(Energy Conservation)\n 出射光线能量不能超过入射光线能量 随着粗糙都上升镜面反射区域面积增加, 平均亮度下降    菲涅尔反射(Freshnel Reflectance)\n 光线以不同角度入射会有不同反射率 对于不同物质也有不同的反射率 F0: 0度较入射的菲涅尔反射值 非金属F0在0.02~0.04, 金属在0.7~1.0    线性空间(Linear Space)\n 光照必须在线性空间完成 shader中输入gamma空间的贴图(如漫反射贴图)需要转换成线性空间 具体操作时需要根据不同引擎和渲染器做不同操作 描述物体表面属性的贴图(如粗糙度, 高光贴图, 金属贴图)必须保证是线性空间    色调映射/复制(Tone Mapping/reproduction)\n 将范围内的照片级别拟合到屏幕有限区域内的过程 基于HDR渲染出来的亮度值会超过显示器能显示的亮度, 需要使用色调映射转为显示器能正常显示的LDR    物质的光学特性(Substance Optical Properties)\n 物质分为三大类: 绝缘体(Insulatiors), 半导体(semi-conductors), 导体(conductors) 渲染和游戏通常只关注导体(金属)和绝缘体(电解质, 非金属) 非金属具有单色/灰色镜面反射颜色(单个float), 金属具有彩色镜面反射(RGB)    PBR介绍   PBR的范畴由三部分组成\n 基于物理的材质(Material) 基于物理的光照(Lighting) 基于物理适配的相机(Camera)    基于现实世界的物理原理更相符的理论构成的渲染技术的集合\n  美术可以直接以物理参数为依据编写表面材质\n  无论光照条件如何, 材质都会看起来显示正确\n  判断光照模型是否基于物理, 必须满足以下三个条件\n 基于微平面(Microfacet)的表面模型 能量守恒 应用基于物理的BRDF    微平面模型 ( Microfacets )  到达微观尺度后任何平面都可以用称为微平面的细小镜面来进行描绘 平面越粗糙, 微平面排列越混乱, 入射光线大体更趋向于完全不同的方向发散(Scatter)开来, 反射更大 平面越光滑, 入射光线大体更趋向同一方向, 反射更小更锐利 用统计学的方法估算微平面粗糙程度  半程向量(Halfway Vector): 位于光线向量l和视线向量v之间的中间向量 用基于一个平面的粗糙度(Roughness)来计算出半程向量的方向与微平面平均取向方向一致的概率    能量守恒 ( Energy Conservation )   出射光线能量不能超过入射光线能量 ( 发光面除外 )\n  镜面反射光照 (反射部分): 光线直接不会进入平面直接反射的光线\n  漫反射光照 (折射部分): 光线进入表面被吸收的光线\n 光线与粒子碰撞后吸收光线所携带的一部分或是全部能量, 转为热量 并非所有能量会被全部吸收, 光线会继续沿着随机方向发散, 再和其他粒子碰撞直至能量完全耗尽或者再次离开这个表面 光线脱离物体表面后将会协同构成该表面的(漫反射)颜色 PBR进行简化, 假设平面上每一点所有折射光都会被完全吸收而不会散开 部分次表面散射(Subsurface Scattering)技术的着色器技术仍保留, 更好地显示皮肤, 大理石, 蜡质等类视觉效果    金属 (Metallic) 表面的反射与非金属(介电质Dielectrics)不同, PBR中需要区别处理:\n 反射原理与折射原理相同 不会显示漫反射颜色(所有折射光会被直接吸收而不会散开, 只留下反射光)    反射光与折射光二者互斥, 光线被反射无法被吸收, 折射光余下的进入表面中的能量正好是计算完反射后余下的能量\n  渲染方程, 反射率方程   渲染方程(Render Equation):\n 描述了光能在场景中的流动, 目前用来模拟光视觉最好的模型 物理基础是能量守恒定律    反射率方程(The Reflectance Equation):\n 基于PBR的渲染方程的特化版本(近似)    辐射度量学 (Radiometry)   辐射度量学: 用来度量电磁场辐射(包括可见光)的手段\n  多种辐射度量(radiometric quantities)用来测量曲面或某个方向的光, 其中辐射率(Radiance)与反射率方程有关\n  辐射率(Radiance)用来量化单一方向发射来的光线大小或强度, 由许多物理变量集合而成:\n  辐射通量:\na. 表示一个光源所输出的能量\nb. 可以看作该光源包含各种波长的一个函数, 辐射通量计算该函数的总面积\na. 以瓦特为单位, 通常使用RGB来作为辐射通量的表示, 对于视觉上的影响可以忽略\n  立体角(Solid Angle): 投射到单位球体上的一个截面的大小或者面积\n  辐射强度(Radiant Intensity):\na. 表示单位球面上, 一个光源向每单位立体角所投送的辐射通量\nb. 用于计算单位面积(立体角)能量大小\n    辐射率是辐射度量学上表示一个区域平面上光线总量的物理量, 受到入射(Incident)光线与平面法线间夹角的余弦值影响\n  将立体角和面积看作无穷小(面转为点, 立体角转为方向向量), 就可以用辐射率表示单束光线穿过空间中的一点\n  通常关注的是辐照度(Irradiance) 用于表示所有投射到点p光线的总和\n  BxDF  对于BRDF, BTDF, BSDF, BSSRDF等几种双向分布函数的一个统一表示 BSDF = BRDF(漫反射) + BTDF(穿透折射) BSSRDF: 相比与BRDF可以指定不同光线入射位置和出射位置 BSDF, BTDF, BSSRDF用于表示透明材质和次表面散射材质  双向反射分布函数(BRDF, Bidrectional Reflective Distribution Function)   基于表面材质属性 对入射辐射率 缩放或加权\n  输入: 光的入射, 出射方向, 平面法线, 微平面粗糙度\n  输出: (近似) 每束光线 对一个材质平面 最终反射的光线的权\n (能量守恒) 完全光滑情况, 所有入射光线BRDF 返回0.0, 只有一束与出射光线拥有相同的角度光线会得到1.0返回值    BRDF 遵循能量守恒定律\n  采用入射和出射方向作为参数的Blinn-Phong也认为是一个BRDF, 由于不遵循能量守恒, 不是PBR\n  实时渲染管线通常使用 Cook-Torrance BRDF\n  漫反射BRDF(Diffuse BRDF):   传统型:\n Lambert    基于物理模型:\n Oren Nayar Simplified Oren-Nayar Disney Diffuse Renormalized Disney Diffuse Gotanda Diffuse PBR diffuse for GGX+Simth MultiScattering Diffuse    Disney Principled BRDF   着色模型是艺术导向(Art Directable), 不一定要完全物理正确(physically correct)\n  核心理念:\n 应使用直观的参数, 非物理类晦涩参数 参数尽可能少 参数合理范围在0-1 允许参数在有意义时超出正常的合理范围 所有参数组合应尽可能健壮和合理    BRDF参数:\n baseColor(基础色): 表面颜色, 通常由纹理提供 subsurface(次表面): 使用次表面近似控制漫反射形状 metallic(金属度): 金属(0=电介质, 1=金属), 两种不同模型间的线性混合, 金属模型无漫反射 specular(镜面反射强度): 入射镜面反射量, 用于取代折射率 specularTint(镜面反射颜色): 对美术控制的让步, 用于基础色(base color)的入射镜面反射进行颜色控制, 掠射镜面反射仍然非彩色 roughness(粗糙度): 表面粗糙度, 控制漫反射和镜面反射 anisotropic(各向异性强度): 各向异性强度, 用于控制镜面反射高光的纵横比(0同向异性, 1各向异性) sheen(光泽度): 额外的掠射分量(gazing component), 主要用于布料 sheenTint(光泽颜色): 对sheen的颜色控制 clearcoat(清漆强度): 有特殊用途的第二个镜面波瓣(specular lobe) clearcoarGloss(清漆光泽度): 控制透明图层光泽度, 0 = \u0026ldquo;缎面(satin)\u0026ldquo;外观, 1 = \u0026ldquo;光泽(gloss)\u0026ldquo;外观    镜面反射BRDF(Specular BRDF):  目前业界主流基于物理的Specular BRDF是Microfacet Cook-Torrance BRDF  Cook-Torrance BRDF 模型   由漫反射(Lambertian)和镜面反射(cook-torrance)组成\n  Lambertian: c / π\n π用于对漫反射光进行标准化, 足够应付大多数实时渲染    cook-torrance: DFG / 4(ωo⋅n)(ωi⋅n)\n Specular D: 法线分布函数 / 镜面分布, 估算受到表面粗糙程度情况下, 取方向与半程向量一致的微平面数量, 用来估算微平面的主要函数 Specular F: 菲涅耳方程, 不同的表面角下表面所反射的光线所占的比率 Specular G: 几何函数, 描述了微平面自成阴影的属性, 当一个平面比较粗糙, 微平面可能挡住其他微平面减少反射的光线    UE4使用的函数:\n D: Trowbridge-Reitz GGX F: Fresnel-Shilick Approximation G: Smith\u0026rsquo;s Schlick-GGX    法线分布函数( Normal Distribution Function )  统计学上近似表示半程向量h取向一致的微平面比率 输入: 材料的粗糙程度 Trowbridge-Reitz GGX in GLSL:  1 2 3 4 5 6 7 8 9 10 11 12  float D_GGX_TR(vec3 N, vec3 H, float a){ float a2 = a * a; float NdotH = max(dot(N, H), 0.0); float NdotH2 = NdotH * NdotH; float nom = a2; float denom = (NdotH2 * (a2 - 1.0) + 1.0); denom = PI * denom * denom; return nom / denom; }   几何函数 (Geometry Function)   从统计学上近似求得微平面间互相遮蔽的比率, 相互遮蔽会损耗光线的能量\n  输入: 材料的粗糙程度, 粗糙都较高的表面其平面间的相互遮蔽概率就越高\n  使用的几何函数: Schlick-GGX: (GGX, Schlick-Beckmann)\n  为了有效估算几何部分, 需要考虑:\n 观察方向(Geometry Obstruction) 光线方向向量(几何阴影(Geometry Shadowing))    使用史密斯法(Smith\u0026rsquo;s method)包含观察方向和光线方向向量\n  Schlick-GGX in GLSL:\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  float GeometrySchlickGGX(float NdotV, float k){ float nom = NdotV; float denom = NdotV * (1.0 - k) + k; return nom / denom; } float GeometrySmith(vec3 N, vec3 V, vec3 L, float k){ float NdotV = max(dot(N, V), 0.0); float NdotL = max(dot(N, L), 0.0); float ggx1 = GeometrySchlickGGX(NdotV, k); float ggx2 = GeometrySchlickGGX(NdotL, k); return ggx1 * ggx2; }   菲涅尔方程 (Fresnel Requation)   描述被反射的光线对比光线被折射部分所占的比率, 这个比率会随着观察角度不同而不同\n  当光线碰撞到一个表面时, 菲捏尔方程会根据观察角度求得被反射光线的占比\n  根据能量守恒原则, 可以直接得出光线被折射的部分以及剩余能量\n  垂直观察物体(视线法线夹角0)只有基础反射率(Base Reflectivity), 利用折射指数(IOR, Indices of Refraction)计算得出\n  当视线法线夹角增大时反射性会增大, 90度理论上能完全反射光线\n  使用Freshnel-Schlick近似法求得近似解 ( 菲涅尔方程较复杂 )\n  仅对非金属表面(电介质)有效, 对于导体(Conductor)表面, 使用折射指数计算基础折射率不能得出正确的结论, 需要使用另一种菲涅尔方程\n  统一金属和非金属公式: 通常预先计算出基础反射率, 然后基于相应观察角的Freshnel-Schlick近似对这个值进行插值\n  规律: 基础反射率, 非金属通常不会高于0.17, 导体材质大多在0.5-1.0\n  金属工作流\n 额外使用一个金属度(Metalness)的参数来编写表面材质 材质纹理通常由金属和非金属混合组成    Freshel Schlick in GLSL:\n  1 2 3 4 5 6 7  // calc F0 // vec3 F0 = vec3(0.04); // F0 = mix(F0, surfaceColor.rgb, metalness);  vec3 freshnel Schlick(float cosTheta, vec3 F0){ return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0); }   编写PBR材质  PBR渲染管线所需要的每一个表面参数都可以用纹理来定义或者建模 使用纹理可以逐片段控制每个表面上特定的点对于光线是如何响应的  常见的纹理列表  反照率(Albedo): 该纹理为每个金属的纹素指定表面颜色或基础反射率, 类似于漫反射纹理, 区别在于漫反射纹理图像中通常包含细小的阴影和深色的裂纹, 反照率纹理只包含表面颜色 法线(Normal): 逐片段指定独特的法线, 形成高度假象 金属度(Metallic): 逐片段指定该纹素是不是金属质地, 可编写为灰度值, 或01二元值 粗糙度(Roughness) #1: 逐片段指定某个表面粗糙程度, 采样得来的粗糙程度会影响表面的微平面统计学上的取向度 光滑度(Smoothness) #2: 更加直观的粗糙度, 采样时转为粗糙度(1.0 - 光滑度) 环境光遮蔽(AO, Ambient Occlusion): AO为表面和周围潜在的几何图形指定了一个额外的阴影因子, 光的结尾引入环境遮蔽可以明显提升场景视觉效果  ","description":"PBR 学习记录","id":6,"section":"posts","tags":["cg"],"title":"PBR笔记","uri":"http://npchitman.github.io/posts/pbr/"},{"content":"图形渲染管线 功能 主要功能 通过给定参数(虚拟相机, 3D场景物体, 光源等)产生2D图像, 显示在屏幕上:\n 将物体3D座标转变为屏幕空间2D座标 为屏幕每个像素点进行着色  工作流程  顶点数据输入 顶点着色器 ( 可编程 ) 曲面细分过程 ( 可选, 可编程 ) 几何着色器 ( 可编程 ) 图元组装 裁剪剔除 光栅化 片段着色器 ( 可编程 ) 混合测试  流程 顶点数据  为顶点着色器提供处理的数据 顶点坐标, 纹理坐标, 顶点法线和顶点颜色等属性 通过绘制指令中传递图元信息, 让opengl明白顶点数据构成什么图元  常见图元信息  点(GL_POINTS) 线(GL_LINES) 线条(GL_LINE_STRIP) 三角面(GL_TRIANGLES)  顶点着色器  主要进行坐标变换, 将输入的局部坐标变换到世界, 观察, 裁剪坐标 可以在这里进行光照计算, 但一般在片段着色器中计算  细面曲分 (可选)  利用镶嵌化处理技术对三角面进行细分, 以此来增加三角面的数量 借助曲面细分的技术实现LOD机制 组成:  外壳着色器(Hull Shader)(可编程) 镶嵌器(Tessellator): 由硬件管理 域着色器(Domain Shader)(可编程)    几何着色器 (可选)  将输入的点或线扩展成多边形 输入的是完整的图元 输出的可以是一个或多个其他的图元, 或者不输出  图元组装  将输入的顶点组装成指定的图元 进行裁剪和背面剔除相关的优化, 加速渲染 进行屏幕映射, 变换为窗口坐标(透视除法/视口变换, 由硬件实现)  光栅化  离散化, 将3D连续物体转化为离散屏幕像素点的过程 三角形组装, 三角形遍历 确定图元所覆盖的片段, 利用顶点属性插值得到片段的属性信息, 然后送到片段着色器进行颜色计算  片段着色器 / 像素着色器(Pixel Shader)  决定像素上的最终颜色 进行光照和阴影等高级效果处理  测试混合阶段  进行裁切测试 Alpha测试 模板测试 深度测试 没有经过测试的片段会被丢弃, 不需要进行混合阶段 经过测试的片段会进入混合阶段  Alpha测试  根据片段的Alpha值进行混合, 用来产生半透明的效果 半透明的物体需要遵循画家算法进行绘制, 排序难题 或使用顺序无关的半透明渲染技术(OIT)技术  ","description":"渲染管线流程","id":7,"section":"posts","tags":["cg"],"title":"渲染管线介绍 流程","uri":"http://npchitman.github.io/posts/render_pipline/"},{"content":"效果预览:    Info Preview          介绍  对纯键盘操作进行优化 其他的发行版未测试, 理论上也适用 具体的系统环境参考图1(Info)  安装方法: 执行部署脚本 注: 脚本将所有的配置部署到相应的目录下, 为了安全性, 若文件存在则不会覆盖,\n若要使用安装脚本, 请备份好自己的配置再将其从相应的目录删除\n1 2 3 4 5  $ git clone https://github.com/npchitman/dot_files $ cd dot_files $ sh put.sh   安装字体  Fantasque: 非常好看的编程用字体 Font-Awesome: 图标, 可在这里查找  使用方法 快捷键  全部快捷键在 i3config 配置里, 举出一些例子  快捷菜单    按键 说明     Super + d 快捷启动应用   Super + Shift + d 应用菜单   Super + Shift + w 快捷启动站点   Super + shift + e 电源选项    音频控制  需要 playerctl 支持,\nspotify 下完美使用, 其他自行测试     按键 说明     Super + Shift + n/m 播放上一首/下一首曲子   Super + Alt + p 暂停/继续播放   Super + Alt + k/j 音量增加/减少   Super + Alt + m 静音/取消静音    其他    按键 说明     Super + Alt + w 随机壁纸与相应配色, 需要 pywal 支持   Super + a 快速截图, 需要 scort 支持    配置文件包含的应用 - config    应用名 说明     compton 独立合成管理器, 为 i3 提供淡入淡出, 阴影等效果   dunst 通知窗口   i3 i3 桌面配置   polybar 系统状态栏, 若要使用请参考 wiki   ranger tui 文件浏览器, 支持图片预览等功能   rofi 包含程序启动器, 电源菜单, 网站快捷打开菜单   termite 模拟终端   tilda 下拉式模拟终端   vimiv 类 vim 操作的图片浏览工具    - emacs   基于 redguardtoo/emacs.d\n的配置, 请参考文档\n  custom.el: 请参考 overide default setup\n  - nvim  使用 thinkvim 的配置 thinkvim.d: 参考 User Custom  快捷键绑定  下面是个人自定义快捷键, 关于 thinkvim 默认的快捷键参考 leaderkey.vim 和 motion.vim \u0026lt;LocalLeader\u0026gt;为分号;     快捷键 说明     H/L 移动到改行句首/尾   Ctrl g 映射为Esc键   \u0026lt;LocalLeader\u0026gt; cc/cu 注释/取消注释   \u0026lt;LocalLeader\u0026gt;\u0026lt;LocalLeader\u0026gt; k/j 向上/下快速跳转光标   \u0026lt;LocalLeader\u0026gt; q 退出vim    - xorg X系统相关配置, 下面给出相关 wiki\n Xresources Xinitrc Xprofile  - zsh zsh 相关配置, 参考 ohmyzsh\n zprofile zshrc  ","description":"arch linux, i3wm","id":8,"section":"posts","tags":["linux"],"title":"Linux Ricing 1.0","uri":"http://npchitman.github.io/posts/linux_ricing/"},{"content":"Sample images from Pixabay\n","description":"game develop","id":9,"section":"gallery","tags":null,"title":"Game","uri":"http://npchitman.github.io/gallery/game/"},{"content":"Sample images from Pixabay\n","description":"photo gallery","id":10,"section":"gallery","tags":null,"title":"Photo","uri":"http://npchitman.github.io/gallery/photo/"},{"content":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\n https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","description":"Hugo, the world’s fastest framework for building websites","id":11,"section":"","tags":null,"title":"About","uri":"http://npchitman.github.io/about/"}]